// script.js

// „Ç≠„É£„É©„ÇØ„Çø„Éº„ÇØ„É©„Çπ
class Character {
    constructor(name, maxHp, maxMp, attack, sprite, level = 1, exp = 0, nextLevelExp = 100) {
        this.name = name;
        this.maxHp = maxHp;
        this.hp = maxHp;
        this.maxMp = maxMp;
        this.mp = maxMp;
        this.attack = attack;
        this.sprite = sprite;
        this.level = level;
        this.exp = exp;
        this.nextLevelExp = nextLevelExp;
        this.knownMagic = [];
    }

    takeDamage(damage) {
        this.hp -= damage;
        if (this.hp < 0) this.hp = 0;
    }

    heal(amount) {
        this.hp += amount;
        if (this.hp > this.maxHp) this.hp = this.maxHp;
    }

    useMp(amount) {
        this.mp -= amount;
        if (this.mp < 0) this.mp = 0;
    }

    isAlive() {
        return this.hp > 0;
    }

    addExp(amount) {
        this.exp += amount;
        addLog(`ÁµåÈ®ìÂÄ§„Çí${amount}Áç≤Âæó„Åó„ÅüÔºÅ`);
        this.checkLevelUp();
    }

    checkLevelUp() {
        while (this.exp >= this.nextLevelExp) {
            this.level++;
            this.exp -= this.nextLevelExp;
            this.nextLevelExp = Math.floor(this.nextLevelExp * 1.5);
            this.maxHp += 15;
            this.maxMp += 10;
            this.attack += 5;
            this.hp = this.maxHp;
            this.mp = this.maxMp;
            addLog(`ÂãáËÄÖ„ÅØ„É¨„Éô„É´${this.level}„Å´‰∏ä„Åå„Å£„ÅüÔºÅ`, 'heal');
            playSound(levelupSound);
            this.learnNewMagic();
        }
    }

    learnNewMagic() {
        let newMagic = null;
        switch (this.level) {
            case 3:
                newMagic = { name: '„Éí„Éé„Ç´„Ç≤', damage: 22, mpCost: 4, type: 'attack', element: 'fire' };
                break;
            case 6:
                newMagic = { name: '„É¶„Ç≠„Éè„Éç', damage: 30, mpCost: 7, type: 'attack', element: 'ice' };
                break;
            case 9:
                newMagic = { name: '„Éâ„ÇØ„É¢„É™', damage: 16, mpCost: 8, type: 'poison', element: 'dark' };
                break;
            case 12:
                newMagic = { name: '„Ç§„Ç´„ÉÖ„ÉÅ', damage: 40, mpCost: 12, type: 'attack', element: 'thunder' };
                break;
            case 15:
                newMagic = { name: '„Éü„Ç≥„É¢„É™', healAmount: 35, mpCost: 10, type: 'heal', element: 'light' };
                break;
            case 18:
                newMagic = { name: '„ÉÅ„Ç´„É©„ÉÄ„Éû', buff: 'attack', buffAmount: 5, buffTurns: 3, mpCost: 10, type: 'buff', element: 'none' };
                break;
            case 20:
                newMagic = { name: '„Éõ„É†„É©„ÇÆ', damage: 65, mpCost: 20, type: 'attack', element: 'fire' };
                break;
        }
        if (newMagic) {
            this.knownMagic.push(newMagic);
            addLog(`ÂãáËÄÖ„ÅØ„Äå${newMagic.name}„Äç„ÇíË¶ö„Åà„ÅüÔºÅ`, 'heal');
        }
    }
}

// Êïµ„ÇØ„É©„Çπ
class Enemy extends Character {
    constructor(name, maxHp, attack, sprite, expReward, isBoss = false, actions = null, element = null, weakTo = null, specialAttack = null) {
        super(name, maxHp, 0, attack, sprite);
        this.expReward = expReward;
        this.isBoss = isBoss;
        this.actions = actions;
        this.element = element;
        this.weakTo = weakTo;
        this.specialAttack = specialAttack;
        this.turnCount = 0;
    }
    getAction() {
        if (this.specialAttack && Math.random() < 0.1) {
            return 'specialAttack';
        }
        if (this.actions) {
            return this.actions[Math.floor(Math.random() * this.actions.length)];
        }
        if (this.isBoss) {
            const actions = ['attack', 'strongAttack', 'magicAttack'];
            return actions[Math.floor(Math.random() * actions.length)];
        } else {
            const actions = ['attack', 'attack', 'strongAttack'];
            return actions[Math.floor(Math.random() * actions.length)];
        }
    }
}

// „Ç≤„Éº„É†Áä∂ÊÖãÂ§âÊï∞
let player;
let currentEnemy;
let gameState = 'battle';
let isPlayerTurn = true;
let actionQueue = [];
let currentLogIndex = 0;
let logMessages = [];
let logTimer = null;
let lastPlayerState = null;

const enemyData = [
    { name: '„Åä„Å∞„ÅëÂ§ßÊú®', hp: 60, attack: 12, sprite: '', image: 'images/bajegi.png', exp: 25, actions: ['attack', 'strongAttack', 'attack'], element: 'wood', weakTo: 'fire', specialAttack: { name: '„Å§„Çã„ÅÆ„É†„ÉÅ', effect: 'ÂÖ®‰ΩìÊîªÊíÉÔºãÈ∫ªÁó∫' } },
    { name: '„Ç¥„Éñ„É™„É≥', hp: 50, attack: 10, sprite: '', image: 'images/goburin.png', exp: 20, actions: ['attack', 'attack', 'strongAttack'], element: 'none', weakTo: null, specialAttack: { name: 'ÁõóË≥ä„ÅÆ‰∏ÄÊíÉ', effect: 'Â§ß„ÉÄ„É°„Éº„Ç∏ÔºãMPÂê∏Âèé' } },
    { name: '„Ç¥„Éº„Çπ„Éà', hp: 70, attack: 14, sprite: '', image: 'images/ghost.png', exp: 28, actions: ['attack', 'attack', 'strongAttack'], element: 'dark', weakTo: 'light', specialAttack: { name: 'Èúä‰ΩìÂåñ', effect: '1„Çø„Éº„É≥Áâ©ÁêÜÁÑ°Âäπ' } },
    { name: 'È≠îÂ•≥', hp: 80, attack: 18, sprite: '', image: 'images/majo.png', exp: 40, actions: ['attack', 'magicAttack', 'magicAttack'], element: 'dark', weakTo: 'light', specialAttack: { name: 'Èóá„ÅÆÂë™Ë©õ', effect: 'Á∂ôÁ∂ö„ÉÄ„É°„Éº„Ç∏ÔºàÊØíÔºâ' } },
    { name: '„É°„Ç∏„Çß„Éâ', hp: 65, attack: 13, sprite: '', image: 'images/mejed.png', exp: 35, actions: ['attack', 'magicAttack', 'attack'], element: 'light', weakTo: 'dark', specialAttack: { name: 'ÁõÆ„Åã„Çâ„Éì„Éº„É†', effect: 'Èò≤Âæ°ÁÑ°Ë¶ñ„ÅÆÈ´òÂ®ÅÂäõÊîªÊíÉ' } },
    { name: '„Éü„Éü„ÉÉ„ÇØ', hp: 100, attack: 18, sprite: '', image: 'images/mimic.png', exp: 50, actions: ['attack', 'strongAttack', 'attack'], element: 'none', weakTo: null, specialAttack: { name: 'Êì¨ÊÖã', effect: '1Â∫¶„Å†„ÅëÊîªÊíÉÁÑ°Âäπ' } },
    { name: '„Éä„Ç§„Éà', hp: 120, attack: 20, sprite: '', image: 'images/naito.png', exp: 45, actions: ['attack', 'strongAttack', 'attack'], element: 'none', weakTo: null, specialAttack: { name: '„Ç∑„Éº„É´„Éâ„Éê„ÉÉ„Ç∑„É•', effect: 'Â§ß„ÉÄ„É°„Éº„Ç∏ÔºãÊ∞óÁµ∂' } },
    { name: '„Ç™„Éº„Éá„É≥', hp: 90, attack: 15, sprite: '', image: 'images/oden.png', exp: 32, actions: ['attack', 'strongAttack', 'attack'], element: 'none', weakTo: null, specialAttack: { name: 'Èõ∑ÊíÉ', effect: 'ÂÖ®‰ΩìÊîªÊíÉÔºãÈ∫ªÁó∫' } },
    { name: 'Á†¥Â£ä„É≠„Éú', hp: 110, attack: 22, sprite: '', image: 'images/robo.png', exp: 50, actions: ['attack', 'magicAttack', 'strongAttack'], element: 'machine', weakTo: 'thunder', specialAttack: { name: '„É¨„Éº„Ç∂„ÉºÁ†≤', effect: 'È´òÂ®ÅÂäõÂçò‰ΩìÊîªÊíÉ' } },
    { name: 'ÈÄÜÁ´ã„Å°Êóè', hp: 85, attack: 17, sprite: '', image: 'images/sakasazoku.png', exp: 36, actions: ['attack', 'strongAttack', 'attack'], element: 'none', weakTo: null, specialAttack: { name: 'ÈÄÜËª¢„Éë„É≥„ÉÅ', effect: 'Â§ß„ÉÄ„É°„Éº„Ç∏ÔºãÊîªÊíÉÂäõUP' } },
    { name: '„Çπ„Ç±„É´„Éà„É≥', hp: 75, attack: 13, sprite: '', image: 'images/sukeruton.png', exp: 30, actions: ['attack', 'attack', 'strongAttack'], element: 'none', weakTo: null, specialAttack: { name: 'È™®Êäï„Åí‰π±Ëàû', effect: '„É©„É≥„ÉÄ„É†2„Äú4ÂõûÊîªÊíÉ' } },
    { name: '„Çπ„É©„Ç§„É†', hp: 40, attack: 8, sprite: '', image: 'images/suraimu.png', exp: 15, actions: ['attack', 'attack', 'attack'], element: 'water', weakTo: 'fire', specialAttack: { name: 'ÂàÜË£Ç', effect: 'HPÂçäÂàÜ‰ª•‰∏ã„ÅßÂàÜË∫´„ÇíÂëº„Å∂' } },
    { name: 'ÁÅ´„ÅÆÈ≥•', hp: 60, attack: 12, sprite: '', image: 'images/summon_1.png', exp: 30, actions: ['attack', 'magicAttack', 'attack'], element: 'fire', weakTo: 'ice', specialAttack: { name: 'ÁÇé„ÅÆÁøº', effect: 'ÂÖ®‰ΩìÁÅ´Â±ûÊÄßÊîªÊíÉ' } },
    { name: '„Éï„Ç°„Ç§„Éà„Ç¶„É´„Éï', hp: 80, attack: 16, sprite: '', image: 'images/summon_2.png', exp: 35, actions: ['attack', 'strongAttack', 'attack'], element: 'beast', weakTo: 'ice', specialAttack: { name: 'ÂíÜÂìÆ', effect: 'ÊïµÂÖ®‰Ωì„ÅÆÊîªÊíÉÂäõUP' } },
    { name: 'Êµ∑„ÅÆÂåñË∫´', hp: 100, attack: 20, sprite: '', image: 'images/summon_3.png', exp: 45, actions: ['attack', 'magicAttack', 'strongAttack'], element: 'water', weakTo: 'thunder', specialAttack: { name: 'Ê¥•Ê≥¢', effect: 'ÂÖ®‰ΩìÊ∞¥Â±ûÊÄßÊîªÊíÉ' } },
    { name: '„É≠„ÉÉ„ÇØ', hp: 130, attack: 24, sprite: '', image: 'images/summon_4.png', exp: 55, actions: ['attack', 'strongAttack', 'attack'], element: 'rock', weakTo: 'thunder', specialAttack: { name: 'Â≤©Áü≥ËêΩ„Å®„Åó', effect: 'ÂÖ®‰ΩìÊîªÊíÉ' } },
    { name: '„Åø„Å´„Å©„Çâ„Åî', hp: 150, attack: 28, sprite: '', image: 'images/summon_5.png', exp: 60, actions: ['attack', 'magicAttack', 'strongAttack'], element: 'fire', weakTo: 'ice', specialAttack: { name: 'ÁÇé„ÅÆ„Éñ„É¨„Çπ', effect: 'È´òÂ®ÅÂäõÁÅ´Â±ûÊÄßÊîªÊíÉÔºã„ÇÑ„Åë„Å©' } },
    { name: '„Çæ„É≥„Éì', hp: 80, attack: 12, sprite: '', image: 'images/zonbi.png', exp: 25, actions: ['attack', 'attack', 'strongAttack'], element: 'dark', weakTo: 'fire', specialAttack: { name: 'ÊØíÂêê„Åç', effect: 'ÊØíÁä∂ÊÖã‰ªò‰∏é' } }
];

const bossData = {
    name: 'È≠îÁéã', 
    hp: 300, 
    attack: 35, 
    sprite: 'üëë', 
    image: 'images/Gemini_Generated_Image_71sr7j71sr.png', // ‰øÆÊ≠£: demonking.png -> Gemini_Generated_Image_71sr7j71sr.png
    exp: 200
};

// Èü≥Â£∞
let bgm = null;
let levelupSound = null;
let attackPlayerSound = null;
let attackEnemySound = null;
let gameoverSound = null;
let isMuted = false;

// ÂàùÊúüÂåñ
function initGame() {
    if (!player) {
        player = new Character('ÂãáËÄÖ', 100, 50, 20, 'üõ°Ô∏è');
    } else {
        // „Éó„É¨„Ç§„É§„Éº„ÅÆHP„Å®MP„ÅØÊØéÊà¶ÈóòÈñãÂßãÊôÇ„Å´ÂÖ®ÂõûÂæ©
        player.hp = player.maxHp;
        player.mp = player.maxMp;
    }

    // „É¨„Éô„É´20„ÅßÈ≠îÁéãÁôªÂ†¥
    if (player.level >= 20) {
        currentEnemy = new Enemy(bossData.name, bossData.hp, bossData.attack, bossData.sprite, bossData.exp, true);
        currentEnemy.image = bossData.image;
    } else {
        const enemyTemplate = enemyData[Math.floor(Math.random() * enemyData.length)];
        currentEnemy = new Enemy(
            enemyTemplate.name,
            enemyTemplate.hp,
            enemyTemplate.attack,
            enemyTemplate.sprite,
            enemyTemplate.exp,
            false,
            enemyTemplate.actions,
            enemyTemplate.element,
            enemyTemplate.weakTo,
            enemyTemplate.specialAttack
        );
        currentEnemy.image = enemyTemplate.image;
    }

    gameState = 'battle';
    isPlayerTurn = true;
    actionQueue = [];
    logMessages = [];
    currentLogIndex = 0;
    clearLogTimer();

    updateDisplay();
    addLog(`${currentEnemy.name}„ÅåÁèæ„Çå„ÅüÔºÅ`);
}

function initAudio() {
    if (!bgm) {
        bgm = document.getElementById('bgm');
        levelupSound = document.getElementById('levelup-sound');
        attackPlayerSound = document.getElementById('attack-player-sound');
        attackEnemySound = document.getElementById('attack-enemy-sound');
        gameoverSound = document.getElementById('gameover-sound');
    }
    // „Åì„Åì„Åß„ÅØBGM„ÅÆÂÜçÁîü/ÂÅúÊ≠¢„ÅØË°å„Çè„Åö„ÄÅtoggleMute()„Åæ„Åü„ÅØ startGame() „ÅßÂà∂Âæ°
    const volume = document.getElementById('volume-slider').value / 100;
    if (bgm) bgm.volume = volume * 0.3;
    if (levelupSound) levelupSound.volume = volume;
    if (attackPlayerSound) attackPlayerSound.volume = volume;
    if (attackEnemySound) attackEnemySound.volume = volume;
    if (gameoverSound) gameoverSound.volume = volume;
    if (bgm && !isMuted && gameState === 'battle') { // BGM„Åå„Åô„Åß„Å´ÂÜçÁîü‰∏≠„Åß„Å™„Åë„Çå„Å∞ÂÜçÁîü
        bgm.play().catch(e => console.log('BGM play failed:', e));
    }
}

function stopAllSounds() {
    if (bgm) { bgm.pause(); /* bgm.currentTime = 0; */ } // Êà¶ÈóòÁ∂ôÁ∂ö„ÅÆ„Åü„ÇÅcurrentTime„ÅØ„É™„Çª„ÉÉ„Éà„Åó„Å™„ÅÑ
    if (levelupSound) { levelupSound.pause(); levelupSound.currentTime = 0; }
    if (attackPlayerSound) { attackPlayerSound.pause(); attackPlayerSound.currentTime = 0; }
    if (attackEnemySound) { attackEnemySound.pause(); attackEnemySound.currentTime = 0; }
    if (gameoverSound) { gameoverSound.pause(); gameoverSound.currentTime = 0; }
}

// UIÊõ¥Êñ∞
function updateDisplay() {
    document.getElementById('player-hp').textContent = player.hp;
    document.getElementById('player-mp').textContent = player.mp;
    document.getElementById('player-level').textContent = player.level;
    document.getElementById('player-exp').textContent = player.exp;
    document.getElementById('player-next-exp').textContent = player.nextLevelExp;

    document.querySelector('.player-hp-fill').style.width = (player.hp / player.maxHp * 100) + '%';
    document.querySelector('.player-mp-fill').style.width = (player.mp / player.maxMp * 100) + '%';
    document.querySelector('.player-exp-fill').style.width = (player.exp / player.nextLevelExp * 100) + '%';

    document.getElementById('enemy-name').textContent = currentEnemy.name;
    document.getElementById('enemy-hp').textContent = currentEnemy.hp;
    document.getElementById('enemy-max-hp').textContent = currentEnemy.maxHp;

    const enemyImage = document.getElementById('enemy-image');
    const enemySprite = document.getElementById('enemy-sprite');
    if (currentEnemy.image) {
        enemyImage.src = currentEnemy.image;
        enemyImage.alt = currentEnemy.name;
        enemyImage.style.display = 'inline';
        enemySprite.style.display = 'none';
    } else {
        enemyImage.style.display = 'none';
        enemySprite.style.display = 'inline';
        enemySprite.textContent = currentEnemy.sprite;
    }

    document.querySelector('.enemy-hp-fill').style.width = (currentEnemy.hp / currentEnemy.maxHp * 100) + '%';

    const btns = document.querySelectorAll('.command-btn');
    btns.forEach(btn => btn.disabled = !isPlayerTurn || gameState !== 'battle');

    const magicBtn = btns[1];
    const healBtn = btns[2];
    
    if (player.knownMagic.length > 0) {
        const latestMagic = player.knownMagic[player.knownMagic.length - 1];
        magicBtn.disabled = player.mp < latestMagic.mpCost || !isPlayerTurn || gameState !== 'battle';
        magicBtn.textContent = latestMagic.name;
    } else {
        magicBtn.disabled = true;
        magicBtn.textContent = '„Åæ„Åª„ÅÜ';
    }
    
    healBtn.disabled = player.mp < 5 || !isPlayerTurn || gameState !== 'battle';

    // „Ç≤„Éº„É†„Ç™„Éº„Éê„Éº„Åæ„Åü„ÅØÂãùÂà©ÊôÇ„ÅÆË°®Á§∫Âà∂Âæ°
    if (gameState !== 'battle') {
        document.getElementById('battle-commands').style.display = 'none';
        document.getElementById('game-over').style.display = 'block';
        let gameOverText = '';
        if (gameState === 'win') {
            if (currentEnemy.isBoss) {
                gameOverText = 'È≠îÁéã„ÇíÂÄí„Åó„ÅüÔºÅ‰∏ñÁïå„Å´Âπ≥Âíå„ÅåÊàª„Å£„ÅüÔºÅ';
            } else {
                // ÈÄöÂ∏∏„ÅÆÊïµ„ÇíÂÄí„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅ„Åì„ÅÆÁîªÈù¢„ÅØË°®Á§∫„Åõ„ÅöÁõ¥Êé•Ê¨°„ÅÆÊà¶Èóò„Å∏
                // „Åì„Åì„Å´„ÅØÂà∞ÈÅî„Åó„Å™„ÅÑ„ÅØ„Åö„Å†„Åå„ÄÅÂøµ„ÅÆ„Åü„ÇÅ
                gameOverText = `${currentEnemy.name}„ÇíÂÄí„Åó„ÅüÔºÅÂãùÂà©ÔºÅ`; 
            }
            // BGM„ÅØÊ≠¢„ÇÅ„Å™„ÅÑ
        } else { // gameState === 'lose' („Éó„É¨„Ç§„É§„ÉºÊïóÂåóÊôÇ)
            gameOverText = '„ÅÇ„Å™„Åü„ÅØÂÄí„Çå„Åü...';
            if (bgm) bgm.pause(); // „Éó„É¨„Ç§„É§„ÉºÊïóÂåóÊôÇ„ÅØBGM„ÇíÂÅúÊ≠¢
        }
        document.getElementById('game-over-text').textContent = gameOverText;

        // ÂãùÂà©ÊôÇ„ÅÆ„ÄåÊúÄÂàù„Åã„Çâ„Äç„Éú„Çø„É≥„ÅØ„ÄÅÈ≠îÁéãÊà¶„ÅÆÂãùÂà©ÊôÇ„ÅÆ„ÅøË°®Á§∫„Åï„Çå„Çã„Çà„ÅÜ„Å´„Åô„Çã
        // „Åæ„Åü„ÅØ„ÄÅÁâπÂÆö„ÅÆÊù°‰ª∂„ÅßÈùûË°®Á§∫„Å´„Åô„Çã„Å™„Å©„ÅÆË™øÊï¥„ÅåÂèØËÉΩ
        // ÁèæÂú®„ÅÆ„É≠„Ç∏„ÉÉ„ÇØ„Åß„ÅØ„ÄÅwin/lose„Å©„Å°„Çâ„Åß„ÇÇ„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã„ÅÆ„Åß„ÄÅ
        // win„ÅÆÂ†¥Âêà„ÅØ„ÄåÁ∂ö„Åë„Çã„Äç„Å™„Å©„Å´Â§âÊõ¥„Åô„Çã„Åã„ÄÅ„Åì„ÅÆË°®Á§∫Ëá™‰Ωì„Çí„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã
        if (gameState === 'win' && !currentEnemy.isBoss) {
            document.getElementById('game-over').style.display = 'none'; // ÈÄöÂ∏∏„ÅÆÂãùÂà©ÊôÇ„ÅØÈùûË°®Á§∫
        }
    } else { // gameState === 'battle'
        document.getElementById('battle-commands').style.display = 'grid';
        document.getElementById('game-over').style.display = 'none';
        if (bgm && !isMuted && bgm.paused) { // Êà¶Èóò‰∏≠„Å´BGM„ÅåÂÅúÊ≠¢„Åó„Å¶„ÅÑ„Åü„ÇâÂÜçÁîü„ÇíË©¶„Åø„Çã
            bgm.play().catch(e => console.log('BGM play failed on updateDisplay:', e));
        }
    }
}

// „É≠„Ç∞Èñ¢‰øÇ„ÅÆÊîπËâØ
function addLog(message, className = '') {
    logMessages.push({ message, className });
    if (!logTimer) {
        displayNextLog();
    }
}

function displayNextLog() {
    if (currentLogIndex >= logMessages.length) {
        clearLogTimer();
        checkBattleEnd();
        return;
    }

    const logContainer = document.getElementById('log-messages');
    const currentLog = logMessages[currentLogIndex];
    
    // Âè§„ÅÑ„É≠„Ç∞„ÇíÂâäÈô§ÔºàÊúÄÂ§ß3„Å§„Åæ„ÅßË°®Á§∫Ôºâ
    while (logContainer.children.length >= 3) {
        logContainer.removeChild(logContainer.firstChild);
    }
    
    const p = document.createElement('p');
    if (currentLog.className) p.classList.add(currentLog.className);
    p.textContent = currentLog.message;
    logContainer.appendChild(p);
    
    currentLogIndex++;
    
    // Ê¨°„ÅÆ„É≠„Ç∞„Çí1.5ÁßíÂæå„Å´Ë°®Á§∫
    logTimer = setTimeout(() => {
        displayNextLog();
    }, 1500);
}

function clearLogTimer() {
    if (logTimer) {
        clearTimeout(logTimer);
        logTimer = null;
    }
}

const enemyDeathPoems = {
    '„Ç¥„Éñ„É™„É≥': [
        '„Åê„Å¨„Å¨‚Ä¶„Åì„Çå„Åå‰∫∫Èñì„ÅÆÂäõ„Åã‚Ä¶',
        '„Ç™„É¨„ÅÆÂÆùÁâ©‚Ä¶Ë™∞„Å´„ÇÇÊ∏°„Åï„Å™„ÅÑ‚Ä¶',
        '„Åæ„Åü‚Ä¶„ÅÑ„Å§„Åã‚Ä¶‰ºö„Åä„ÅÜ„Åú‚Ä¶'
    ],
    '„Ç™„Éº„ÇØ': [
        'ËÇâ‚Ä¶„ÇÇ„Å£„Å®È£ü„Åπ„Åü„Åã„Å£„Åü‚Ä¶',
        '„Ç™„Éº„ÇØ„ÅÆË™á„Çä‚Ä¶„Åì„Åì„Å´Êï£„Çã‚Ä¶',
        'ÂÖÑÂºü„Åü„Å°„Çà‚Ä¶Âæå„ÅØÈ†º„Çì„Å†‚Ä¶'
    ],
    '„Çπ„Ç±„É´„Éà„É≥': [
        'È™®„Åæ„ÅßÁ†ï„Åã„Çå„Çã„Å®„ÅØ‚Ä¶ÁÑ°Âøµ‚Ä¶',
        'È¢®„Å´‚Ä¶ÈÇÑ„ÇãÊôÇ„ÅåÊù•„Åü„Åã‚Ä¶',
        '„Ç´„É©„Ç´„É©‚Ä¶Èùô„Åã„Å´Áú†„Çç„ÅÜ‚Ä¶'
    ],
    '„Éü„Éü„ÉÉ„ÇØ': [
        'ÂÆùÁÆ±„ÅÆ‰∏≠„Åß‚Ä¶Â§¢„ÇíË¶ã„Åü„Åã„Å£„Åü‚Ä¶',
        'Ê¨°„ÅØ‚Ä¶„ÇÇ„Å£„Å®Â§ß„Åç„Å™Áç≤Áâ©„Çí‚Ä¶',
        '„Åµ„Åµ‚Ä¶Ê≤πÊñ≠„ÅØÁ¶ÅÁâ©„Å†„Åû‚Ä¶'
    ],
    '„É™„Éà„É´„Éâ„É©„Ç¥„É≥': [
        '„Åæ„Å†‚Ä¶Á©∫„ÇíÈ£õ„Å≥„Åü„Åã„Å£„Åü‚Ä¶',
        'ÁÇé„Åå‚Ä¶Ê∂à„Åà„Å¶„ÅÑ„Åè‚Ä¶',
        'ÂÖÑ„Åï„Çì‚Ä¶„Åæ„Åü‰ºö„Åä„ÅÜ‚Ä¶'
    ],
    '„Éï„Ç°„É≥„Ç∞„Ç¶„É´„Éï': [
        'Áæ§„Çå„ÅÆ‰ª≤Èñì„Åü„Å°„Çà‚Ä¶„Åï„Çà„ÅÜ„Å™„Çâ‚Ä¶',
        'ÊúàÂ§ú„Å´‚Ä¶ÈÅ†Âê†„Åà„Çí‚Ä¶',
        'Áâô„Åå‚Ä¶Êäò„Çå„Åü„Åã‚Ä¶'
    ],
    '„É≠„ÉÉ„ÇØ„Ç¥„Éº„É¨„É†': [
        'Â≤©„ÅÆÁú†„Çä„Å´‚Ä¶Êàª„ÇãÊôÇ‚Ä¶',
        'Á†ï„ÅëÊï£„Çã‚Ä¶Êàë„ÅåË∫´„Çà‚Ä¶',
        'Â§ßÂú∞„Å®ÂÖ±„Å´‚Ä¶Ê∞∏ÈÅ†„Å´‚Ä¶'
    ],
    '„Çæ„É≥„Éì': [
        '„ÇÇ„ÅÜ‰∏ÄÂ∫¶‚Ä¶Áîü„Åç„Åü„Åã„Å£„Åü‚Ä¶',
        'ËÖê„Å£„Åü‰Ωì„ÇÇ‚Ä¶„Åì„Çå„Åæ„Åß„Åã‚Ä¶',
        '„ÅÜ„ÅÖ‚Ä¶Èùô„Åã„Å´‚Ä¶Áú†„Çã‚Ä¶'
    ],
    '„Ç¥„Éº„Çπ„Éà': [
        '„Åì„ÅÆ‰∏ñ„Å´‚Ä¶Êú™Á∑¥„ÅØ„Å™„ÅÑ‚Ä¶',
        'Èúß„ÅÆ„Çà„ÅÜ„Å´‚Ä¶Ê∂à„Åà„Å¶„ÅÑ„Åè‚Ä¶',
        '„ÅÇ„Çä„Åå„Å®„ÅÜ‚Ä¶„Åï„Çà„ÅÜ„Å™„Çâ‚Ä¶'
    ],
    'È≠îÂ•≥': [
        '„Åì„Çå„Åå‚Ä¶ÂãáËÄÖ„ÅÆÂäõ„Åã‚Ä¶',
        '‰∏ñÁïå„ÅØ‚Ä¶„ÅäÂâç„Å´Ë®ó„Åù„ÅÜ‚Ä¶',
        'Èóá„ÅØ‚Ä¶„Åæ„ÅüËòá„Çã‚Ä¶'
    ],
    '„É°„Ç∏„Çß„Éâ': [
        '„Åì„Çå„Åå‚Ä¶ÂãáËÄÖ„ÅÆÂäõ„Åã‚Ä¶',
        '‰∏ñÁïå„ÅØ‚Ä¶„ÅäÂâç„Å´Ë®ó„Åù„ÅÜ‚Ä¶',
        'Èóá„ÅØ‚Ä¶„Åæ„ÅüËòá„Çã‚Ä¶'
    ],
    'Á†¥Â£ä„É≠„Éú': [
        '„Åì„Çå„Åå‚Ä¶ÂãáËÄÖ„ÅÆÂäõ„Åã‚Ä¶',
        '‰∏ñÁïå„ÅØ‚Ä¶„ÅäÂâç„Å´Ë®ó„Åù„ÅÜ‚Ä¶',
        'Èóá„ÅØ‚Ä¶„Åæ„ÅüËòá„Çã‚Ä¶'
    ],
    'ÁÅ´„ÅÆÈ≥•': [
        '„Åì„Çå„Åå‚Ä¶ÂãáËÄÖ„ÅÆÂäõ„Åã‚Ä¶',
        '‰∏ñÁïå„ÅØ‚Ä¶„ÅäÂâç„Å´Ë®ó„Åù„ÅÜ‚Ä¶',
        'Èóá„ÅØ‚Ä¶„Åæ„ÅüËòá„Çã‚Ä¶'
    ],
    'Êµ∑„ÅÆÂåñË∫´': [
        '„Åì„Çå„Åå‚Ä¶ÂãáËÄÖ„ÅÆÂäõ„Åã‚Ä¶',
        '‰∏ñÁïå„ÅØ‚Ä¶„ÅäÂâç„Å´Ë®ó„Åù„ÅÜ‚Ä¶',
        'Èóá„ÅØ‚Ä¶„Åæ„ÅüËòá„Çã‚Ä¶'
    ],
    '„Åø„Å´„Å©„Çâ„Åî': [
        '„Åì„Çå„Åå‚Ä¶ÂãáËÄÖ„ÅÆÂäõ„Åã‚Ä¶',
        '‰∏ñÁïå„ÅØ‚Ä¶„ÅäÂâç„Å´Ë®ó„Åù„ÅÜ‚Ä¶',
        'Èóá„ÅØ‚Ä¶„Åæ„ÅüËòá„Çã‚Ä¶'
    ]
};

function checkBattleEnd() {
    if (!currentEnemy.isAlive() && gameState === 'battle') {
        gameState = 'win';
        player.addExp(currentEnemy.expReward);
        addLog(`${currentEnemy.name}„ÇíÂÄí„Åó„ÅüÔºÅ`);
        // // Ëæû‰∏ñ„ÅÆÂè•„ÇíË°®Á§∫
        // const poems = enemyDeathPoems[currentEnemy.name];
        // if (poems && poems.length > 0) {
        //     const poem = poems[Math.floor(Math.random() * poems.length)];
        //     addLog(`„Äå${poem}„Äç`, 'death-poem');
        // }
        
        // È≠îÁéã„ÇíÂÄí„Åó„ÅüÂ†¥Âêà„ÅØÁâπÂà•Âá¶ÁêÜ
        if (currentEnemy.isBoss) {
            updateDisplay(); // „ÄåÈ≠îÁéã„ÇíÂÄí„Åó„ÅüÔºÅ„Äç„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
            setTimeout(() => {
                alert('„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅÈ≠îÁéã„ÇíÂÄí„Åó„Å¶‰∏ñÁïå„ÇíÊïë„ÅÑ„Åæ„Åó„ÅüÔºÅ');
                // È≠îÁéãÊíÉÁ†¥Âæå„ÅØËá™Âãï„Åß„Ç≤„Éº„É†„ÇíÁµÇ‰∫Ü„Åô„Çã„Åã„ÄÅ„Çø„Ç§„Éà„É´„Å´Êàª„Åô„Åã„Å™„Å©
                // ÁèæÂú®„ÅØ„ÄåÊúÄÂàù„Åã„Çâ„Äç„Éú„Çø„É≥„ÅßÂÜçÈñã
            }, 2000);
        } else {
            // ÈÄöÂ∏∏„ÅÆÊïµ„ÅÆÂ†¥Âêà„ÅØ3ÁßíÂæå„Å´Ê¨°„ÅÆÊà¶Èóò„Å∏
            setTimeout(() => {
                startNextBattle(); // „Åì„Åì„ÅßÊ¨°„ÅÆÊà¶Èóò„ÇíÈñãÂßã
            }, 3000);
        }
    } else if (!player.isAlive() && gameState === 'battle') {
        gameState = 'lose';
        addLog('„ÅÇ„Å™„Åü„ÅØÂÄí„Çå„Åü...');
        playSound(gameoverSound);
        // Ê≠ª„Çì„Å†ÊôÇ„ÅÆÁä∂ÊÖã„Çí‰øùÂ≠ò
        lastPlayerState = {
            level: player.level,
            exp: player.exp,
            nextLevelExp: player.nextLevelExp,
            maxHp: player.maxHp,
            maxMp: player.maxMp,
            attack: player.attack,
            knownMagic: JSON.parse(JSON.stringify(player.knownMagic))
        };
        updateDisplay();
    } else {
        // Êà¶ÈóòÁ∂ôÁ∂ö„ÅÆÂ†¥Âêà
        if (!isPlayerTurn && gameState === 'battle') {
            setTimeout(() => {
                enemyTurn();
            }, 1000);
        } else if (isPlayerTurn && gameState === 'battle') {
            updateDisplay();
        }
    }
}

function startNextBattle() {
    gameState = 'battle';
    document.getElementById('battle-commands').style.display = 'grid';
    document.getElementById('game-over').style.display = 'none';
    document.getElementById('log-messages').innerHTML = ''; // „É≠„Ç∞„Çí„ÇØ„É™„Ç¢
    logMessages = []; // „É≠„Ç∞„É°„ÉÉ„Çª„Éº„Ç∏ÈÖçÂàó„Çí„É™„Çª„ÉÉ„Éà
    currentLogIndex = 0; // „É≠„Ç∞„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Çí„É™„Çª„ÉÉ„Éà
    clearLogTimer(); // „É≠„Ç∞„Çø„Ç§„Éû„Éº„Çí„ÇØ„É™„Ç¢
    initGame(); // Êñ∞„Åó„ÅÑÊïµ„Åß„Ç≤„Éº„É†„ÇíÂàùÊúüÂåñ
    initAudio(); // BGM„ÅåÊ≠¢„Åæ„Å£„Å¶„ÅÑ„ÇãÂ†¥Âêà„Å´ÂÜçÈñã„ÇíË©¶„Åø„Çã
}

// È≠îÊ≥ï„Ç®„Éï„Çß„ÇØ„Éà
function showMagicEffectByName(name) {
    const effect = document.getElementById('magic-effect');
    if (!effect) return;
    effect.className = 'magic-effect';
    effect.style.display = 'block';
    if (name.includes('„Éï„Ç°„Ç§„Ç¢„Éº')) effect.classList.add('fire-effect');
    else if (name.includes('„Ç¢„Ç§„Çπ„Éú„É´„Éà')) effect.classList.add('ice-effect');
    else if (name.includes('„Çµ„É≥„ÉÄ„Éº„Çπ„Éà„Éº„É†')) effect.classList.add('thunder-effect');
    else if (name.includes('„Éõ„Éº„É™„Éº„É©„Ç§„Éà')) effect.classList.add('holy-effect');
    setTimeout(() => effect.style.display = 'none', 500);
}

// „Éó„É¨„Ç§„É§„ÉºË°åÂãï
function playerAttack() {
    if (!isPlayerTurn || gameState !== 'battle') return;
    playSound(attackPlayerSound); // ÂäπÊûúÈü≥ÂÜçË®≠ÂÆö
    const damage = player.attack + Math.floor(Math.random() * 10);
    currentEnemy.takeDamage(damage);
    addLog(`ÂãáËÄÖ„ÅÆÊîªÊíÉÔºÅ${currentEnemy.name}„Å´${damage}„ÅÆ„ÉÄ„É°„Éº„Ç∏ÔºÅ`, 'damage');
    isPlayerTurn = false;
    updateDisplay();
}

function playerMagic() {
    if (!isPlayerTurn || gameState !== 'battle' || player.knownMagic.length === 0) return;
    const magic = player.knownMagic[player.knownMagic.length - 1];
    if (player.mp < magic.mpCost) {
        addLog('MP„ÅåË∂≥„Çä„Å™„ÅÑÔºÅ');
        return;
    }
    player.useMp(magic.mpCost);
    showMagicEffectByName(magic.name);
    
    if (magic.type === 'attack') {
        let dmg = magic.damage + Math.floor(Math.random() * 10);
        // Âº±ÁÇπÂà§ÂÆö
        if (magic.element && currentEnemy.weakTo === magic.element) {
            dmg = Math.floor(dmg * 1.5);
            addLog('Âº±ÁÇπ„ÇíÁ™Å„ÅÑ„ÅüÔºÅ', 'damage');
        }
        currentEnemy.takeDamage(dmg);
        addLog(`ÂãáËÄÖ„ÅØ${magic.name}„ÇíÂî±„Åà„ÅüÔºÅ${currentEnemy.name}„Å´${dmg}„ÅÆ„ÉÄ„É°„Éº„Ç∏ÔºÅ`, 'damage');
    } else if (magic.type === 'heal') {
        player.heal(magic.healAmount);
        addLog(`ÂãáËÄÖ„ÅØ${magic.name}„ÇíÂî±„Åà„ÅüÔºÅHP„Åå${magic.healAmount}ÂõûÂæ©ÔºÅ`, 'heal');
    } else if (magic.type === 'poison') {
        const poisonDamage = Math.floor(magic.damage * 0.5);
        if (magic.element && currentEnemy.weakTo === magic.element) {
            poisonDamage = Math.floor(poisonDamage * 1.5);
            addLog('Âº±ÁÇπ„ÇíÁ™Å„ÅÑ„ÅüÔºÅ', 'damage');
        }
        currentEnemy.takeDamage(poisonDamage);
        addLog(`${currentEnemy.name}„ÅØ${magic.name}„Å´„Çà„Å£„Å¶ÊØí„Çí„ÅÜ„Å§ÔºÅ${poisonDamage}„ÅÆ„ÉÄ„É°„Éº„Ç∏ÔºÅ`, 'damage');
    } else if (magic.type === 'buff') {
        currentEnemy.attack += magic.buffAmount;
        addLog(`${currentEnemy.name}„ÅÆÊîªÊíÉÂäõ„Åå${magic.buffAmount}‰∏ä„Åå„Å£„ÅüÔºÅ`, 'buff');
        setTimeout(() => {
            currentEnemy.attack -= magic.buffAmount;
            addLog(`${currentEnemy.name}„ÅÆÊîªÊíÉÂäõ„ÅåÂÖÉ„Å´Êàª„Å£„ÅüÔºÅ`, 'buff');
        }, magic.buffTurns * 1000);
    }
    isPlayerTurn = false;
    updateDisplay();
}

function playerHeal() {
    if (!isPlayerTurn || gameState !== 'battle' || player.mp < 5) return;
    player.useMp(5);
    const heal = 20 + Math.floor(Math.random() * 10);
    player.heal(heal);
    addLog(`ÂãáËÄÖ„ÅØÂõûÂæ©„Åó„ÅüÔºÅHP„Åå${heal}ÂõûÂæ©ÔºÅ`, 'heal');
    isPlayerTurn = false;
    updateDisplay();
}

function runAway() {
    if (!isPlayerTurn || gameState !== 'battle') return;
    
    // È≠îÁéã„Åã„Çâ„ÅØÈÄÉ„Åí„Çâ„Çå„Å™„ÅÑ
    if (currentEnemy.isBoss) {
        addLog('È≠îÁéã„Åã„Çâ„ÅØÈÄÉ„Åí„Çâ„Çå„Å™„ÅÑÔºÅ');
        isPlayerTurn = false;
        updateDisplay();
        return;
    }
    
    if (Math.random() > 0.3) {
        addLog('ÈÄÉ„Åí„Çã„Åì„Å®„Å´ÊàêÂäü„Åó„ÅüÔºÅ');
        setTimeout(() => {
            startNextBattle(); // ÈÄÉËµ∞ÊàêÂäüÊôÇ„ÇÇÊ¨°„ÅÆÊà¶Èóò„Å∏
        }, 2000);
    } else {
        addLog('ÈÄÉ„Åí„Çã„Åì„Å®„Åå„Åß„Åç„Å™„Åã„Å£„ÅüÔºÅ');
        isPlayerTurn = false;
        updateDisplay();
    }
}

// Êïµ„ÅÆ„Çø„Éº„É≥
function enemyTurn() {
    if (gameState !== 'battle' || isPlayerTurn) return;
    
    const action = currentEnemy.getAction();
    let damage = 0;
    let actionName = '';
    
    switch (action) {
        case 'attack':
            damage = currentEnemy.attack + Math.floor(Math.random() * 5);
            actionName = 'ÊîªÊíÉ';
            break;
        case 'strongAttack':
            damage = Math.floor(currentEnemy.attack * 1.5) + Math.floor(Math.random() * 8);
            actionName = 'Âº∑ÊîªÊíÉ';
            break;
        case 'magicAttack':
            damage = Math.floor(currentEnemy.attack * 1.3) + Math.floor(Math.random() * 10);
            actionName = 'È≠îÊ≥ïÊîªÊíÉ';
            break;
        case 'specialAttack':
            // ÁâπÊÆäÊîªÊíÉ„ÅÆÊºîÂá∫„Éª„ÉÄ„É°„Éº„Ç∏‰æã
            if (currentEnemy.specialAttack) {
                actionName = currentEnemy.specialAttack.name;
                // ÁâπÊÆäÊîªÊíÉ„ÅÆ„ÉÄ„É°„Éº„Ç∏„ÅØÊîªÊíÉÂäõ„ÅÆ2ÂÄçÔºãŒ±
                damage = Math.floor(currentEnemy.attack * 2) + Math.floor(Math.random() * 20);
                addLog(`„Äê${currentEnemy.name}„ÅÆÂøÖÊÆ∫ÊäÄÔºÅ„Äë${actionName}ÔºÅ`, 'special');
                addLog(`ÂäπÊûú: ${currentEnemy.specialAttack.effect}`, 'special');
            } else {
                actionName = 'ÂøÖÊÆ∫ÊäÄ';
                damage = Math.floor(currentEnemy.attack * 2) + Math.floor(Math.random() * 20);
            }
            break;
    }
    playSound(attackEnemySound); // ÂäπÊûúÈü≥ÂÜçË®≠ÂÆö
    player.takeDamage(damage);
    addLog(`${currentEnemy.name}„ÅÆ${actionName}ÔºÅÂãáËÄÖ„Å´${damage}„ÅÆ„ÉÄ„É°„Éº„Ç∏ÔºÅ`, 'damage');
    isPlayerTurn = true;
}

// „Ç≤„Éº„É†ÈñãÂßã„ÉªÂÜçÈñã
function startGame() {
    document.getElementById('start-screen').style.display = 'none';
    document.getElementById('game-content').style.display = 'block';
    initGame();
    initAudio(); // „Ç≤„Éº„É†ÈñãÂßãÊôÇ„Å´BGM„ÇíÂÜçÁîü
}

function restartGame() {
    document.getElementById('battle-commands').style.display = 'grid';
    document.getElementById('game-over').style.display = 'none';
    document.getElementById('log-messages').innerHTML = '';
    logMessages = [];
    currentLogIndex = 0;
    clearLogTimer();
    // „Éó„É¨„Ç§„É§„Éº„Çí„É™„Çª„ÉÉ„Éà
    if (lastPlayerState) {
        player = new Character('ÂãáËÄÖ', lastPlayerState.maxHp, lastPlayerState.maxMp, lastPlayerState.attack, 'üõ°Ô∏è', lastPlayerState.level, lastPlayerState.exp, lastPlayerState.nextLevelExp);
        player.knownMagic = JSON.parse(JSON.stringify(lastPlayerState.knownMagic));
        player.hp = player.maxHp;
        player.mp = player.maxMp;
    } else {
        player = new Character('ÂãáËÄÖ', 100, 50, 20, 'üõ°Ô∏è');
    }
    if (bgm) bgm.pause();
    initGame();
    initAudio();
}

// Ëµ∑ÂãïÂá¶ÁêÜ
window.addEventListener('load', () => {
    document.getElementById('start-button').addEventListener('click', startGame);
    // „Éö„Éº„Ç∏„É≠„Éº„ÉâÊôÇ„Å´„Ç™„Éº„Éá„Ç£„Ç™ÂàùÊúüÂåñ„ÇíÂëº„Å∂„Åì„Å®„Åß„ÄÅ„É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„Å™„Åó„ÅßBGMÂÜçÁîü„ÇíË©¶„Åø„Çã„ÅÆ„ÇíÈÅø„Åë„Çã
    // BGM„ÅÆÂÜçÁîü„ÅØ startGame() „Åß„É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥Âæå„Å´ÈñãÂßã„Åô„Çã
});

// Èü≥Èñ¢‰øÇ
function playSound(audio) {
    if (audio && !isMuted) {
        audio.currentTime = 0; // Áü≠„ÅÑÂäπÊûúÈü≥„ÅØÊØéÂõûÊúÄÂàù„Åã„ÇâÂÜçÁîü
        audio.play().catch(() => {});
    }
}

function toggleMute() {
    isMuted = !isMuted;
    const muteBtn = document.getElementById('mute-btn');
    muteBtn.textContent = isMuted ? 'üîá' : 'üîä';
    if (isMuted) {
        stopAllSounds();
    } else {
        if (gameState === 'battle' && bgm) {
            bgm.play().catch(() => {}); // „Éü„É•„Éº„ÉàËß£Èô§ÊôÇ„ÄÅÊà¶Èóò‰∏≠„Å™„ÇâBGM„ÇíÂÜçÁîü
        }
    }
}

function changeVolume() {
    const volume = document.getElementById('volume-slider').value / 100;
    if (bgm) bgm.volume = volume * 0.3;
    if (levelupSound) levelupSound.volume = volume;
    if (attackPlayerSound) attackPlayerSound.volume = volume;
    if (attackEnemySound) attackEnemySound.volume = volume;
    if (gameoverSound) gameoverSound.volume = volume;
}
